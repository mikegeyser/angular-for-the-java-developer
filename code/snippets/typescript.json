{
	/*
	// Place your snippets for TypeScript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/
	"The todo store skeleton": {
		"prefix": "demo-store",
		"body": [
			"import { Injectable } from '@angular/core';",
			"import { Observable } from 'rxjs/Observable';",
			"",
			"export class Todo {",
			"  id?: string;",
			"  title?: string;",
			"  completed?: boolean;",
			"",
			"  constructor(title: string) {",
			"    this.completed = false;",
			"    this.title = title.trim();",
			"  }",
			"}",
			"",
			"@Injectable()",
			"export class TodoStore {",
			"  todos: Todo[] = [];",
			"",
			"  constructor() { }",
			"}"
		],
		"description": "The todo store skeleton"
	},
	"Adding the todo api import to the store": {
		"prefix": "demo-store-import-api",
		"body": [
			"import { TodocontrollerApi, TodoApiModel } from './services';"
		],
		"description": "Adding the todo api import to the store"
	},
	"Loading the todos from the api": {
		"prefix": "demo-store-todos",
		"body": [
			"constructor(public api: TodocontrollerApi) {",
			"	this.api.list().subscribe(x => this.set(x));",
			"}",
			"",
			"private set(todos: TodoApiModel[]) {",
			"	this.todos = todos.map(x => <Todo>x);",
			"}"
		],
		"description": "Loading the todos from the api"
	},
	"Import api into module": {
		"prefix": "demo-module-import-api",
		"body": [
			"import { BASE_PATH, TodocontrollerApi } from './services';"
		],
		"description": "Import api into module"
	},
	"Set api providers in module": {
		"prefix": "demo-module-providers",
		"body": [
			"providers: [",
			"    {provide: BASE_PATH, useValue:'.'},",
			"    TodocontrollerApi,",
			"    TodoStore",
			"  ],"
		],
		"description": "Import api into module"
	},
	"Add todo in component": {
		"prefix": "demo-component-add",
		"body": [
			"addTodo(){",
			"  if (this.newTodoText.trim().length) {",
			"    this.store.add(this.newTodoText);",
			"    this.newTodoText = '';",
			"  }",
			"}"
		],
		"description": "Add todo in component"
	},
	"Add todo in store": {
		"prefix": "demo-store-add",
		"body": [
			"add(title: string) {",
			"	let todo = new Todo(title);",
			"	this.api.create(todo).subscribe(x => this.set(x));",
			"}"
		],
		"description": "Add todo in store"
	},
	"Complete todo in component": {
		"prefix": "demo-component-complete",
		"body": [
			"toggleCompletion(todo: Todo) {",
			"	this.store.complete(todo);",
			"}"
		],
		"description": "Complete todo in component"
	},
	"Complete todo in store": {
		"prefix": "demo-store-complete",
		"body": [
			"complete(todo: Todo) {",
			"	this.api.complete(todo.id).subscribe(x => this.set(x));",
			"}"
		],
		"description": "Complete todo in store"
	},
	"Edit todo in component - 1": {
		"prefix": "demo-component-edit1",
		"body": [
			"editTodo(todo: Todo) {",
			"	todo.editing = true;",
			"}"
		],
		"description": "Edit todo in component (begin editing)"
	},
	"Edit todo in component - 2": {
		"prefix": "demo-component-edit2",
		"body": [
			"cancelEditingTodo(todo: Todo) {",
			"	todo.editing = false;",
			"}"
		],
		"description": "Edit todo in component (cancel editing)"
	},
	"Edit todo in component - 3": {
		"prefix": "demo-component-edit3",
		"body": [
			"completeEditing(todo: Todo, editedTitle: string) {",
			"	todo.title = editedTitle;",
			"	this.store.update(todo);",
			"}"
		],
		"description": "Edit todo in component (complete editing)"
	},
	"Edit todo in store": {
		"prefix": "demo-store-edit",
		"body": [
			"update(todo: Todo){",
			"	this.api.update(todo).subscribe(x => this.set(x));",
			"}"
		],
		"description": "Edit todo in store"
	},
	"Delete todo in component": {
		"prefix": "demo-component-delete",
		"body": [
			"remove(todo: Todo) {",
			"	this.store.remove(todo);",
			"}"
		],
		"description": "Delete todo in component"
	},
	"Delete todo in store": {
		"prefix": "demo-store-delete",
		"body": [
			"remove(todo: Todo) {",
			"	this.api.remove(todo).subscribe(x => this.set(x));",
			"}"
		],
		"description": "Delete todo in store"
	},
	"Get remaining todos in store": {
		"prefix": "demo-store-remaining",
		"body": [
			"getRemaining() { return this.todos.filter(x => !x.completed); }"
		],
		"description": "Get remaining todos in store"
	},
	"Module Complete": {
		"prefix": "demo-module-complete",
		"body": [
			"import { BrowserModule } from '@angular/platform-browser';",
			"import { NgModule } from '@angular/core';",
			"import { FormsModule } from '@angular/forms';",
			"import { HttpModule } from '@angular/http';",
			"",
			"import { AppComponent } from './app.component';",
			"import { BASE_PATH, TodocontrollerApi } from './services';",
			"import { TodoStore } from './todo.store';",
			"",
			"@NgModule({",
			"  declarations: [",
			"    AppComponent",
			"  ],",
			"  imports: [",
			"    BrowserModule,",
			"    FormsModule,",
			"    HttpModule",
			"  ],",
			"  providers: [",
			"    {provide: BASE_PATH, useValue:\".\"},",
			"    TodocontrollerApi,",
			"    TodoStore",
			"  ],",
			"  bootstrap: [AppComponent]",
			"})",
			"export class AppModule { }"
		],
		"description": "Module Complete"
	},
	"Component Complete": {
		"prefix": "demo-component-complete",
		"body": [
			"import { Component } from '@angular/core';",
			"import { TodoStore, Todo } from './todo.store';",
			"",
			"@Component({",
			"  selector: 'app-root',",
			"  templateUrl: 'app.component.html'",
			"})",
			"export class AppComponent {",
			"  newTodoText: string;",
			"",
			"  constructor(public store: TodoStore) { }",
			"",
			"  addTodo() {",
			"    if (this.newTodoText.trim().length) {",
			"      this.store.add(this.newTodoText);",
			"      this.newTodoText = '';",
			"    }",
			"  }",
			"",
			"  toggleCompletion(todo: Todo) {",
			"    this.store.complete(todo);",
			"  }",
			"",
			"  remove(todo: Todo) {",
			"    this.store.remove(todo);",
			"  }",
			"",
			"  editTodo(todo: Todo) {",
			"    todo.editing = true;",
			"  }",
			"",
			"  cancelEditingTodo(todo: Todo) {",
			"    todo.editing = false;",
			"  }",
			"",
			"  completeEditing(todo: Todo, editedTitle: string) {",
			"    todo.title = editedTitle;",
			"    this.store.update(todo);",
			"  }",
			"}"
		],
		"description": "Component Complete"
	},
	"Store Complete": {
		"prefix": "demo-store-complete",
		"body": [
			"import { Injectable } from '@angular/core';",
			"import { Observable } from 'rxjs/Observable';",
			"import { TodocontrollerApi, TodoApiModel } from './services';",
			"",
			"export class Todo implements TodoApiModel {",
			"	id?: string;",
			"	title?: string;",
			"	completed?: boolean;",
			"	editing?: boolean;",
			"",
			"	constructor(title: string) {",
			"		this.completed = false;",
			"		this.editing = false;",
			"		this.title = title.trim();",
			"	}",
			"}",
			"",
			"@Injectable()",
			"export class TodoStore {",
			"	todos: Todo[] = [];",
			"",
			"	constructor(public api: TodocontrollerApi) {",
			"		this.api.list().subscribe(x => this.set(x));",
			"	}",
			"",
			"	private set(todos: TodoApiModel[]) {",
			"		this.todos = todos.map(x => <Todo>x);",
			"	}",
			"",
			"	add(title: string) {",
			"		let todo = new Todo(title);",
			"		this.api.create(todo).subscribe(x => this.set(x));",
			"	}",
			"",
			"	remove(todo: Todo) {",
			"		this.api.remove(todo).subscribe(x => this.set(x));",
			"	}",
			"",
			"	complete(todo: Todo) {",
			"		this.api.complete(todo.id).subscribe(x => this.set(x));",
			"	}",
			"",
			"	update(todo: Todo){",
			"		this.api.update(todo).subscribe(x => this.set(x));",
			"	}",
			"",
			"	getRemaining() { return this.todos.filter(x => !x.completed); }",
			"}"
		],
		"description": "Store Complete"
	}
}